// Generated by CoffeeScript 1.3.1
(function() {

  this.Sprite = (function() {

    Sprite.name = 'Sprite';

    function Sprite(_arg) {
      var animations, height, location, parent, spritemap, width;
      location = _arg.location, width = _arg.width, height = _arg.height, spritemap = _arg.spritemap, animations = _arg.animations, parent = _arg.parent;
      this.location = location = new Vector2(location || [0, 0]);
      parent.append(this.element = $('<div>', {
        'class': 'sprite',
        css: {
          width: width + 'px',
          height: height + 'px',
          left: location.x | 0 + 'px',
          bottom: location.y | 0 + 'px',
          zIndex: $(window).height() - location.y | 0,
          background: 'url(' + spritemap + ')'
        }
      }));
      this.animations = animations;
      this.spritemap = spritemap;
    }

    Sprite.prototype.fin = function() {
      return this.element.remove();
    };

    Sprite.prototype.animate = function(time) {
      var animation, frame, t;
      animation = this.animation;
      if (animation) {
        t = time - this.animStart;
        frame = animation.frame(t);
        if (frame) {
          this.element.css({
            backgroundPosition: -frame[0] + 'px ' + -frame[1] + 'px'
          });
        }
      }
      return this;
    };

    Sprite.prototype.play = function(name) {
      var animation;
      animation = this.animation = new Animation(this.animations[name]);
      this.animate(this.animStart = Time());
      return this;
    };

    Sprite.prototype.draw = function(time) {
      var location;
      location = this.location;
      this.element.css({
        left: (location.x | 0) + 'px',
        bottom: (location.y | 0) + 'px',
        zIndex: $(window).height() - location.y | 0
      });
      this.animate(time);
      return this;
    };

    return Sprite;

  })();

  this.Animation = (function() {

    Animation.name = 'Animation';

    function Animation(_arg) {
      this.frames = _arg.frames, this.extrap = _arg.extrap;
    }

    Animation.prototype.frame = function(t) {
      var current, extrap, frame, frames, tDirection, tFinal, tLoop;
      frames = this.frames;
      current = this.current;
      tFinal = frames.last()[2] || 0;
      extrap = this.extrap;
      if (extrap === 'loop') {
        t = t % tFinal;
      } else if (extrap === 'mirror') {
        tDirection = (t / tFinal | 0) % 2;
        tLoop = t % tFinal;
        t = tDirection * (tFinal - tLoop) + tLoop * (1 - tDirection);
      } else if (extrap === 'reset') {
        t = (t > tFinal ? 0 : t);
      } else {
        t = (t > tFinal ? tFinal : t);
      }
      frame = void 0;
      if (frames[1] && t < frames[1][2]) {
        this.current = 0;
        frame = frames[0];
      } else if (frames[current + 1] && t >= frames[current + 1][2]) {
        this.current = current + 1;
        frame = frames[current + 1];
      }
      return frame;
    };

    return Animation;

  })();

}).call(this);
