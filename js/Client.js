// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Client = (function() {

    Client.name = 'Client';

    function Client(_arg) {
      var beings, items, levels, tiles;
      beings = _arg.beings, tiles = _arg.tiles, items = _arg.items, levels = _arg.levels;
      window.game = this;
      this.players = [
        new Player({
          name: '13lur',
          id: 0
        }), new Player({
          name: 'Penny',
          id: 1
        })
      ];
      this.beings = beings;
      this.tiles = tiles;
      this.items = items;
      this.engine = new Engine();
      this.control = new Control();
      this.level = new Level(levels[0]);
      this.view = $('<div>', {
        "class": 'view'
      }).append(this.level.element);
      $('body').append(this.view);
    }

    Client.prototype.fin = function() {
      this.view.remove();
      return this.control.fin();
    };

    Client.prototype.save = function() {
      return {
        beings: this.beings,
        tiles: this.tiles,
        items: this.items,
        levels: [this.level.save()]
      };
    };

    return Client;

  })();

  this.Engine = (function() {

    Engine.name = 'Engine';

    function Engine(options) {
      this.cycle = __bind(this.cycle, this);
      this.system = [];
      this.t0 = Time();
      Frame(this.cycle);
    }

    Engine.prototype.cycle = function() {
      var body, center, dt, hero, subject, t, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      Frame(this.cycle);
      t = Time();
      dt = t - this.t0;
      _ref = this.system;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        body = _ref[_i];
        if (typeof body.cycle === "function") {
          body.cycle(dt);
        }
      }
      _ref1 = this.system;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        body = _ref1[_j];
        _ref2 = this.system;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          subject = _ref2[_k];
          if (subject !== body) {
            if (typeof body.overlaps === "function" ? body.overlaps(subject) : void 0) {
              if (typeof body.collide === "function") {
                body.collide(subject);
              }
            }
          }
        }
        game.level.collide(body);
      }
      _ref3 = this.system;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        body = _ref3[_l];
        if (typeof body.draw === "function") {
          body.draw(t);
        }
      }
      this.t0 = t;
      hero = game.players[0].heroes[0];
      center = hero ? hero.center() : {
        x: 0,
        y: 0
      };
      return game.level.element.css({
        left: $(window).width() / 2 - center.x,
        bottom: $(window).height() / 2 - center.y
      });
    };

    Engine.prototype.at = function(point) {
      var body, result, _i, _len, _ref;
      result = [];
      _ref = this.system;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        body = _ref[_i];
        if (body.contains(point)) {
          result.push(body);
        }
      }
      return result;
    };

    Engine.prototype.add = function(body) {
      return this.system.push(body);
    };

    Engine.prototype.remove = function(body) {
      return this.system.remove(body);
    };

    return Engine;

  })();

}).call(this);
