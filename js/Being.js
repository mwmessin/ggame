// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  this.Being = (function(_super) {

    __extends(Being, _super);

    Being.name = 'Being';

    function Being(options) {
      Being.__super__.constructor.call(this, options);
      options.speed || (options.speed = 5);
      this.name = options.name, this.owner = options.owner, this.orders = options.orders, this.weapon = options.weapon, this.headgear = options.headgear, this.armor = options.armor, this.boots = options.boots, this.gloves = options.gloves, this.jewelry = options.jewelry, this.offHand = options.offHand, this.life = options.life, this.lifeMax = options.lifeMax, this.lifeRegen = options.lifeRegen, this.lifeLeech = options.lifeLeech, this.energy = options.energy, this.energyMax = options.energyMax, this.energyRegen = options.energyRegen, this.energyLeech = options.energyLeech, this.speed = options.speed, this.defense = options.defense, this.dodge = options.dodge, this.critChance = options.critChance, this.critBonus = options.critBonus, this.stunChance = options.stunChance, this.stunDuration = options.stunDuration, this.strength = options.strength, this.dexterity = options.dexterity, this.intelligence = options.intelligence, this.vitality = options.vitality, this.greed = options.greed, this.luck = options.luck, this.geology = options.geology;
      this.inventory = [];
    }

    Being.prototype.calcDamage = function() {
      var damage;
      damage = this.weapon.damageMin + Math.random() * (this.weapon.damageMax - this.weapon.damageMin);
      if (/^sword|^axe|^hammer/.test(this.weapon.kind)) {
        damage *= 1 + this.strength / 100;
      }
      if (/^bow|^knife|^spear/.test(this.weapon.kind)) {
        damage *= 1 + this.dexterity / 100;
      }
      if (/^wand|^staff|^tome/.test(this.weapon.kind)) {
        damage *= 1 + this.intelligence / 100;
      }
      if (Math.chance(this.critChance, 100)) {
        damage *= 1.25 + this.critBonus / 100;
      }
      return damage;
    };

    Being.prototype.save = function() {
      return {
        kind: this.kind,
        owner: this.owner,
        location: this.location
      };
    };

    return Being;

  })(Body);

}).call(this);
