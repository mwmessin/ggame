// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Control = (function() {

    Control.name = 'Control';

    function Control(options) {
      this.keyup = __bind(this.keyup, this);

      this.keydown = __bind(this.keydown, this);

      this.mousemove = __bind(this.mousemove, this);

      this.mouseup = __bind(this.mouseup, this);

      this.mousedown = __bind(this.mousedown, this);
      $(window).keydown(this.keydown).keyup(this.keyup).mousedown(this.mousedown).mouseup(this.mouseup).mousemove(this.mousemove);
      this.use('default');
    }

    Control.prototype.fin = function() {
      return $(window).off();
    };

    Control.prototype.mousedown = function(_arg) {
      var level, which, x, y;
      which = _arg.which;
      if (which === 1) {
        Mouse.left = true;
        if (this.menu.hidden()) {
          if (this.tool.mousedown) {
            this.tool.mousedown(Mouse.x, $(window).height() - Mouse.y);
          }
          if (this.tool.paint) {
            return this.tool.paint(Mouse.x, $(window).height() - Mouse.y);
          }
        } else {
          return this.menu.hidden(true);
        }
      } else if (which === 3) {
        Mouse.right = true;
        if (this.menu.hidden()) {
          level = game.level;
          x = Mouse.x - parseInt(level.element.css('left'));
          y = $(window).height() - Mouse.y - parseInt(level.element.css('bottom'));
          return this.menu.location({
            x: x,
            y: y
          }).hidden(false);
        } else {
          return this.menu.hidden(true);
        }
      }
    };

    Control.prototype.mouseup = function(_arg) {
      var which;
      which = _arg.which;
      if (which === 1) {
        if (!this.dragging) {
          if (this.tool.click) {
            this.tool.click(Mouse.x, $(window).height() - Mouse.y);
          }
        }
        this.dragging = false;
        return Mouse.left = false;
      }
    };

    Control.prototype.mousemove = function(_arg) {
      var pageX, pageY;
      pageX = _arg.pageX, pageY = _arg.pageY;
      Mouse.x = pageX;
      Mouse.y = pageY;
      if (Mouse.left) {
        this.dragging = true;
        if (this.tool.paint) {
          this.tool.paint(pageX, $(window).height() - pageY);
        }
      }
      return false;
    };

    Control.prototype.keydown = function(_arg) {
      var input, json, key, which;
      which = _arg.which;
      key = Key(which);
      if (Keyboard[key] === true) {
        return false;
      }
      Keyboard[key] = true;
      switch (key) {
        case "z":
          if (Keyboard["ctrl"]) {
            return console.log("undo");
          }
          break;
        case "1":
          return this.use("ground");
        case "2":
          return this.use("raise");
        case "3":
          return this.use("lower");
        case "4":
          return this.use("forest");
        case "0":
          input = $("textarea");
          if (input.length) {
            json = input.text();
            input.remove();
            game.fin();
            return new Client(JSON.parse(json));
          } else {
            $(".view").empty();
            return $("<textarea>").text(JSON.stringify(game.save()).pretty()).appendTo(".view");
          }
          break;
        case "w":
        case "d":
        case "s":
        case "a":
        case "p":
        case "'":
        case ";":
        case "l":
          return this.arrows();
      }
    };

    Control.prototype.keyup = function(_arg) {
      var key, which;
      which = _arg.which;
      key = Key(which);
      Keyboard[key] = false;
      switch (key) {
        case "w":
        case "d":
        case "s":
        case "a":
        case "p":
        case "'":
        case ";":
        case "l":
          return this.arrows();
      }
    };

    Control.prototype.use = function(toolName) {
      var tool;
      console.log(toolName);
      tool = this.tool = Control.tools[toolName];
      $("#tool").text(toolName);
      return $("body").css("cursor", tool.cursor);
    };

    Control.prototype.arrows = function() {
      var a, d, s, w;
      w = Keyboard.w, d = Keyboard.d, s = Keyboard.s, a = Keyboard.a;
      return this.command(game.players[0].hero(), new Vector2((a ? -1 : 0) + (d ? 1 : 0), (w ? 1 : 0) + (s ? -1 : 0)));
    };

    Control.prototype.command = function(hero, direction) {
      var angle, anim;
      hero.direction = direction.normalize().times(hero.speed / 100);
      if (direction.length() > 0) {
        angle = direction.angle() / Math.PI * 180;
        if (angle < 45 || angle > 315) {
          anim = "walkRight";
        } else if ((45 < angle && angle < 135)) {
          anim = "walkUp";
        } else if ((135 < angle && angle < 225)) {
          anim = "walkLeft";
        } else {
          anim = "walkDown";
        }
        return hero.play(anim);
      }
    };

    Control.tools = {
      'default': {
        cursor: "crosshair",
        click: function(x, y) {
          return console.log(x, y);
        },
        paint: function(x, y) {
          x -= parseInt(game.level.element.css('left'));
          y -= parseInt(game.level.element.css('bottom'));
          return game.players[0].hero().center(new Vector2(x, y));
        }
      },
      unit: {
        cursor: "crosshair",
        paint: function(x, y) {
          return new Being({
            kind: 'z',
            owner: 0,
            location: [x, y]
          });
        }
      },
      ground: {
        icon: "imgs/tile.cur",
        cursor: "url('imgs/tile.cur') 8 4, crosshair",
        paint: function(x, y) {
          var grid, index, level, num, tile, tileset;
          x -= parseInt(game.level.element.css('left'));
          y -= parseInt(game.level.element.css('bottom'));
          x = x / 24 | 0;
          y = y / 24 | 0;
          tileset = game.tiles;
          level = game.level;
          grid = level.grid;
          if (x < 0 || y < 0) {
            return;
          }
          index = grid.length - y - 1;
          if (index < 0) {
            grid.unshift.apply(grid, (function() {
              var _i, _results;
              _results = [];
              for (num = _i = 0; 0 <= -index ? _i < -index : _i > -index; num = 0 <= -index ? ++_i : --_i) {
                _results.push([]);
              }
              return _results;
            })());
            index = 0;
          }
          if (!grid[index]) {
            grid[index] = [];
          }
          if (grid[index][x]) {
            return;
          }
          tile = {
            name: "dirt",
            z: 0
          };
          extend(tile, tileset["dirt"]);
          extend(tile, {
            parent: level.tilespace,
            location: [x * 24, y * 24]
          });
          grid[index][x] = new Tile(tile);
          return level.orientTile(x, y);
        }
      },
      raise: {
        icon: "imgs/raise.cur",
        cursor: "url('imgs/raise.cur') 8 8, crosshair",
        mousedown: function(x, y) {
          var level;
          level = game.level;
          x -= parseInt(level.element.css('left'));
          y -= parseInt(level.element.css('bottom'));
          x = x / 24 | 0;
          y = y / 24 | 0;
          if (x < 0 || y < 0) {
            return;
          }
          return this.z = level.tile(x, y).z + 1;
        },
        paint: function(x, y) {
          var level;
          level = game.level;
          x -= parseInt(level.element.css('left'));
          y -= parseInt(level.element.css('bottom'));
          x = x / 24 | 0;
          y = y / 24 | 0;
          if (x < 0 || y < 0) {
            return;
          }
          return level.elevation(x, y, this.z);
        }
      },
      lower: {
        icon: "imgs/lower.cur",
        cursor: "url('imgs/lower.cur') 8 8, crosshair",
        mousedown: function(x, y) {
          var level;
          level = game.level;
          x -= parseInt(level.element.css('left'));
          y -= parseInt(level.element.css('bottom'));
          x = x / 24 | 0;
          y = y / 24 | 0;
          if (x < 0 || y < 0) {
            return;
          }
          return this.z = level.tile(x, y).z - 1;
        },
        paint: function(x, y) {
          var level;
          level = game.level;
          x -= parseInt(level.element.css('left'));
          y -= parseInt(level.element.css('bottom'));
          x = x / 24 | 0;
          y = y / 24 | 0;
          if (x < 0 || y < 0) {
            return;
          }
          return level.elevation(x, y, this.z);
        }
      },
      forest: {
        icon: "imgs/tree.cur",
        cursor: "url('imgs/tree.cur') 8 8, crosshair",
        mousedown: function(x, y) {
          var being, level;
          level = game.level;
          x -= parseInt(level.element.css('left'));
          y -= parseInt(level.element.css('bottom'));
          if (x < 0 || y < 0) {
            return;
          }
          being = new Being(extend({
            parent: $(".beingspace"),
            kind: 'bigtree',
            z: 1,
            center: [x, y]
          }, game.beings['bigtree']));
          return game.engine.add(being);
        }
      }
    };

    return Control;

  })();

  this.Mouse = {
    x: 0,
    y: 0
  };

  this.Keyboard = {};

  this.Key = function(code) {
    return {
      17: "ctrl",
      18: "alt",
      37: "left",
      38: "up",
      39: "right",
      40: "down",
      191: "/",
      190: ".",
      188: ",",
      186: ";",
      219: "[",
      221: "]",
      222: "'"
    }[code] || String.fromCharCode(code).toLowerCase();
  };

}).call(this);
